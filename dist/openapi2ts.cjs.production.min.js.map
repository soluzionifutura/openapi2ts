{"version":3,"file":"openapi2ts.cjs.production.min.js","sources":["../src/index.ts"],"sourcesContent":["import { readFileSync, writeFileSync } from \"fs\"\nimport { compile } from \"json-schema-to-typescript\"\nimport type { OpenAPIV3 } from \"openapi-types\"\n\nexport type Options = { \n  openapi: OpenAPIV3.Document | string\n  bannerComment?: string\n  outputFilePath?: string\n}\n\nconst _dig = (obj: any) => {\n  for (const key in obj) {\n    if (key === \"$ref\") {\n      const ref = obj[key].split(\"/\").pop()\n      delete obj[key]\n      obj.tsType = ref\n    } else if (typeof obj[key] === \"object\") {\n      _dig(obj[key])\n    }\n  }\n\n  return obj\n}\n\nexport async function parse({\n  openapi,\n  outputFilePath,\n  bannerComment = `/* eslint-disable @typescript-eslint/ban-types */\n/* eslint-disable @typescript-eslint/member-delimiter-style */\n/**\n * This file was automatically generated by openapi2ts.\n * DO NOT MODIFY IT BY HAND. Instead, modify the source\n * openapi definition and regenerate this file.\n */\n`\n}: Options): Promise<string> {\n  if (typeof openapi === \"string\") {\n    openapi = JSON.parse(readFileSync(openapi, \"utf8\")) as OpenAPIV3.Document\n  }\n\n  const exports = new Set<string>()\n\n  const data = bannerComment + (await Promise.all(Object.entries(openapi.components!.schemas!).map(([name, schema]) => {\n    if (exports.has(name)) {\n      throw new Error(`Duplicate schema name: ${name}`)\n    }\n\n    return compile(_dig(schema), name, {\n      bannerComment: \"\",\n      enableConstEnums: false,\n      style: {\n        semi: false\n      }\n    })\n  }))).join(\"\\n\")\n\n  if (outputFilePath) {\n    writeFileSync(outputFilePath, data)\n  }\n  \n  return data\n}"],"names":["_dig","obj","key","ref","split","pop","tsType","_parse","_asyncToGenerator","_regeneratorRuntime","mark","_callee","_ref","openapi","outputFilePath","_ref$bannerComment","bannerComment","exports","data","wrap","_context","prev","next","JSON","parse","readFileSync","Set","t0","Promise","all","Object","entries","components","schemas","map","_ref2","name","schema","has","Error","compile","enableConstEnums","style","semi","t1","sent","join","writeFileSync","abrupt","stop","apply","arguments","_x"],"mappings":"k4NAUA,IAAMA,EAAO,SAAPA,EAAQC,GACZ,IAAK,IAAMC,KAAOD,EAChB,GAAY,SAARC,EAAgB,CAClB,IAAMC,EAAMF,EAAIC,GAAKE,MAAM,KAAKC,aACzBJ,EAAIC,GACXD,EAAIK,OAASH,MACgB,iBAAbF,EAAIC,IACpBF,EAAKC,EAAIC,IAIb,OAAOD,GAwCR,SAAAM,IAAA,OAAAA,EAAAC,EAAAC,IAAAC,MArCM,SAAAC,EAAAC,GAAA,IAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAA,OAAAT,IAAAU,eAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OAkBqB,OAhB1BR,EAAcF,EAAdE,eACAE,YADcD,EAAAH,EACdI,kTAAaD,EASU,iBAXvBF,EAAOD,EAAPC,WAYEA,EAAUU,KAAKC,MAAMC,eAAaZ,EAAS,UAGvCI,EAAU,IAAIS,IAAaN,EAAAO,GAEpBX,EAAaI,EAAAE,OAAUM,QAAQC,IAAIC,OAAOC,QAAQlB,EAAQmB,WAAYC,SAAUC,KAAI,SAAAC,OAAEC,EAAID,KAAEE,EAAMF,KAC7G,GAAIlB,EAAQqB,IAAIF,GACd,MAAM,IAAIG,gCAAgCH,GAG5C,OAAOI,UAAQxC,EAAKqC,GAASD,EAAM,CACjCpB,cAAe,GACfyB,kBAAkB,EAClBC,MAAO,CACLC,MAAM,SAGT,OAIF,OAJEvB,EAAAwB,GAAAxB,EAAAyB,KAAEC,KAAK,MAZJ5B,EAAIE,EAAAO,GAAAP,EAAAwB,GAcN9B,GACFiC,gBAAcjC,EAAgBI,GAC/BE,EAAA4B,gBAEM9B,GAAI,QAAA,UAAA,OAAAE,EAAA6B,UAAAtC,QACZuC,WAAAC,kCArC0BC,GAAA,OAAA7C,EAAA2C,WAAAC"}